{"version":3,"file":"5a42eeee00b711c65edb.worker.js","mappings":"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","sources":["../webpack/bootstrap","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","utils/Pixel.ts","utils/Area.ts","utils/Seam.ts","utils/Segment.ts","ImageCopyStrategies.ts","ImageSeamProcessor.ts","worker/worker.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export type VisualPixel = {\r\n  x: number;\r\n  y: number;\r\n};\r\n\r\nexport const getPixelAtIndex = (source: ImageData, firstIndex: number): [number, number, number, number] => {\r\n  return [\r\n    source.data[firstIndex],\r\n    source.data[firstIndex + 1],\r\n    source.data[firstIndex + 2],\r\n    source.data[firstIndex + 3],\r\n  ];\r\n}\r\n\r\nexport const convertDataPixelIndexToVisualPixel = (index: number, width: number): VisualPixel => {\r\n  const x = index % width;\r\n  const y = Math.floor(index / width);\r\n\r\n  return { x, y };\r\n}\r\n\r\nexport const convertVisualPixelToDataPixelIndex = (visualPixel: VisualPixel, width: number): number => {\r\n  const { x, y } = visualPixel;\r\n  return ((y * width) + x) * 4;\r\n}","import { VisualPixel } from \"./Pixel\";\r\n\r\nexport class Area {\r\n  topLeft: VisualPixel;\r\n  bottomRight: VisualPixel;\r\n  width: number;\r\n  height: number;\r\n\r\n  constructor(topLeft: VisualPixel, bottomRight: VisualPixel) {\r\n    this.topLeft = topLeft;\r\n    this.bottomRight = bottomRight;\r\n\r\n    this.width = this.bottomRight.x - this.topLeft.x;\r\n    this.height = this.bottomRight.y - this.topLeft.y;\r\n  }\r\n\r\n  getAllVisualPixels(): VisualPixel[] {\r\n    let pixels: VisualPixel[] = [];\r\n\r\n    for(let xCounter = this.topLeft.x; xCounter <= this.bottomRight.x; xCounter++) {\r\n      for(let yCounter = this.topLeft.y; yCounter <= this.bottomRight.y; yCounter++) {\r\n        pixels.push({ x: xCounter, y: yCounter });\r\n      }\r\n    }\r\n\r\n    return pixels;\r\n  }\r\n};\r\n","import { Area } from \"./Area\";\r\nimport { VisualPixel } from \"./Pixel\";\r\n\r\nexport enum SeamOrientation {\r\n  NORTH,\r\n  NORTH_EAST,\r\n  EAST,\r\n  SOUTH_EAST,\r\n  SOUTH,\r\n  SOUTH_WEST,\r\n  WEST,\r\n  NORTH_WEST,\r\n};\r\n\r\nexport type SeamLabel = {\r\n  segment: number;\r\n  orientation: SeamOrientation;\r\n};\r\n\r\nexport class DitherSeam {\r\n  area: Area;\r\n\r\n  constructor(topLeft: VisualPixel, bottomRight: VisualPixel) {\r\n    this.area = new Area(topLeft, bottomRight);\r\n  }\r\n\r\n  getPixelsToBeProcessed(): VisualPixel[] {\r\n    return this.area.getAllVisualPixels()\r\n      .filter((pixel) => (pixel.x + pixel.y) % 2 === 0);\r\n  }\r\n}\r\n","import { Area } from \"./Area\";\r\nimport { VisualPixel } from \"./Pixel\";\r\nimport { DitherSeam, SeamOrientation } from \"./Seam\";\r\n\r\nexport type SegmentLabel = {\r\n  row: number;\r\n  column: number;\r\n}\r\n\r\nexport const segments: { [key: number]: SegmentLabel } = {\r\n  1: { row: 1, column: 1 },\r\n  2: { row: 1, column: 2 },\r\n  3: { row: 1, column: 3 },\r\n  4: { row: 2, column: 1 },\r\n  5: { row: 2, column: 2 },\r\n  6: { row: 2, column: 3 },\r\n  7: { row: 3, column: 1 },\r\n  8: { row: 3, column: 2 },\r\n  9: { row: 3, column: 3 },\r\n};\r\n\r\nexport const isPixelInSegment = (widthOrHeight: number, visualCoordinate: number, rowOrColumn: number): boolean => {\r\n  const lowerBound = Math.round(widthOrHeight / 3) * (rowOrColumn - 1);\r\n  const upperBound = Math.round(widthOrHeight / 3) * rowOrColumn;\r\n\r\n  return visualCoordinate >= lowerBound && visualCoordinate <= upperBound;\r\n};\r\n\r\nexport class Segment {\r\n  area: Area;\r\n\r\n  constructor(topLeft: VisualPixel, bottomRight: VisualPixel) {\r\n    this.area = new Area(topLeft, bottomRight);\r\n  }\r\n\r\n  static fromImageData(imageData: ImageData): Segment[] {\r\n    const { width, height } = imageData;\r\n\r\n    const oneThirdWidth = Math.round(width / 3);\r\n    const twoThirdWidth = Math.round(width / 3 * 2);\r\n\r\n    const oneThirdHeight = Math.round(height / 3);\r\n    const twoThirdHeight = Math.round(height / 3 * 2);\r\n\r\n    return [\r\n      new Segment(\r\n        { x: 0, y: 0},\r\n        { x: oneThirdWidth, y: oneThirdHeight },\r\n      ),\r\n      new Segment(\r\n        { x: oneThirdWidth + 1, y: 0},\r\n        { x: twoThirdWidth, y: oneThirdHeight },\r\n      ),\r\n      new Segment(\r\n        { x: twoThirdWidth + 1, y: 0},\r\n        { x: width, y: oneThirdHeight },\r\n      ),\r\n\r\n      new Segment(\r\n        { x: 0, y: oneThirdHeight + 1},\r\n        { x: oneThirdWidth, y: twoThirdHeight },\r\n      ),\r\n      new Segment(\r\n        { x: oneThirdWidth + 1, y: oneThirdHeight + 1},\r\n        { x: twoThirdWidth, y: twoThirdHeight },\r\n      ),\r\n      new Segment(\r\n        { x: twoThirdWidth + 1, y: oneThirdHeight + 1},\r\n        { x: width, y: twoThirdHeight },\r\n      ),\r\n\r\n      new Segment(\r\n        { x: 0, y: twoThirdHeight + 1},\r\n        { x: oneThirdWidth, y: height },\r\n      ),\r\n      new Segment(\r\n        { x: oneThirdWidth + 1, y: twoThirdHeight + 1},\r\n        { x: twoThirdWidth, y: height },\r\n      ),\r\n      new Segment(\r\n        { x: twoThirdWidth + 1, y: twoThirdHeight + 1},\r\n        { x: width, y: height },\r\n      ),\r\n    ];\r\n  }\r\n\r\n  static fromImageDataAndLabels(imageData: ImageData, labels: SegmentLabel[]): Segment[] {\r\n    const segments = Segment.fromImageData(imageData);\r\n\r\n    const indices = labels.map((label) => ((label.row - 1) * 3) + label.column - 1);\r\n\r\n    return segments.filter((_, index) => indices.includes(index));\r\n  }\r\n\r\n  doesSegmentContainVisualPixel(visualPixel: VisualPixel): boolean {\r\n    const isX = visualPixel.x >= this.area.topLeft.x && visualPixel.x <= this.area.bottomRight.x;\r\n    const isY = visualPixel.y >= this.area.topLeft.y && visualPixel.y <= this.area.bottomRight.y;\r\n\r\n    return isX && isY;\r\n  }\r\n\r\n  getSeam(orientation: SeamOrientation, proportion: number): DitherSeam {\r\n    const { topLeft, bottomRight } = this.area;\r\n    const proportionOfWidth = Math.floor(this.area.width * proportion);\r\n    const proportionOfHeight = Math.floor(this.area.height * proportion);\r\n\r\n    switch (orientation) {\r\n      case SeamOrientation.NORTH:\r\n        return new DitherSeam(\r\n          topLeft,\r\n          { x: bottomRight.x, y: topLeft.y + proportionOfHeight },\r\n        )\r\n      case SeamOrientation.NORTH_EAST:\r\n        return new DitherSeam(\r\n          { x: bottomRight.x - proportionOfWidth, y: topLeft.y },\r\n          { x: bottomRight.x, y: topLeft.y + proportionOfHeight},\r\n        );\r\n      case SeamOrientation.EAST:\r\n        return new DitherSeam(\r\n          { x: bottomRight.x - proportionOfWidth, y: topLeft.y },\r\n          bottomRight,\r\n        );\r\n      case SeamOrientation.SOUTH_EAST:\r\n        return new DitherSeam(\r\n          { x: bottomRight.x - proportionOfWidth, y: bottomRight.y - proportionOfHeight },\r\n          bottomRight,\r\n        );\r\n      case SeamOrientation.SOUTH:\r\n        return new DitherSeam(\r\n          { x: topLeft.x, y: bottomRight.y - proportionOfHeight},\r\n          bottomRight,\r\n        );\r\n      case SeamOrientation.SOUTH_WEST:\r\n        return new DitherSeam(\r\n          { x: topLeft.x, y: bottomRight.y - proportionOfHeight },\r\n          { x: topLeft.x + proportionOfWidth, y: bottomRight.y },\r\n        );\r\n      case SeamOrientation.WEST:\r\n        return new DitherSeam(\r\n          topLeft,\r\n          { x: topLeft.x + proportionOfWidth, y: bottomRight.y },\r\n        );\r\n      case SeamOrientation.NORTH_WEST:\r\n        return new DitherSeam(\r\n          topLeft,\r\n          { x: topLeft.x + proportionOfWidth, y: topLeft.y + proportionOfHeight}\r\n        );\r\n    }\r\n  }\r\n}\r\n","import { convertDataPixelIndexToVisualPixel, getPixelAtIndex } from \"./utils/Pixel\";\r\nimport { isPixelInSegment, Segment, SegmentLabel } from \"./utils/Segment\";\r\n\r\nexport const processImagePair = (left: ImageData, right: ImageData, segmentLabels: SegmentLabel[]): ImageData => {\r\n  const resultsLength = 4 * left.width * left.height;\r\n  const counterIncrement = 4;\r\n\r\n  const segments = Segment.fromImageDataAndLabels(left, segmentLabels);\r\n\r\n  let resultPixels: number[] = []\r\n  for(let counter = 0; counter < resultsLength; counter += counterIncrement) {\r\n    const pixelIndex = Math.floor(counter/4);\r\n\r\n    const visualPixel = convertDataPixelIndexToVisualPixel(pixelIndex, left.width);\r\n    const isLeft = segments.some((segment) => segment.doesSegmentContainVisualPixel(visualPixel));\r\n\r\n    const source = isLeft ? left : right;\r\n    const pixel = getPixelAtIndex(source, counter);\r\n    resultPixels.push(...pixel);\r\n  }\r\n\r\n  const resultClampedArray = new Uint8ClampedArray(resultPixels);\r\n  return new ImageData(resultClampedArray, left.width, left.width);\r\n};\r\n","import { convertVisualPixelToDataPixelIndex, getPixelAtIndex } from \"./utils/Pixel\";\r\nimport { SeamLabel, SeamOrientation } from \"./utils/Seam\";\r\nimport { Segment, segments } from \"./utils/Segment\";\r\n\r\nexport const segmentToSeams:{ [key: number]: SeamLabel[] } = {\r\n  1: [\r\n    { segment: 2, orientation: SeamOrientation.WEST },\r\n    { segment: 4, orientation: SeamOrientation.NORTH },\r\n    { segment: 5, orientation: SeamOrientation.NORTH_WEST },\r\n  ],\r\n  2: [\r\n    { segment: 1, orientation: SeamOrientation.EAST },\r\n    { segment: 3, orientation: SeamOrientation.WEST },\r\n    { segment: 4, orientation: SeamOrientation.NORTH_EAST },\r\n    { segment: 5, orientation: SeamOrientation.NORTH },\r\n    { segment: 6, orientation: SeamOrientation.NORTH_WEST },\r\n  ],\r\n  3: [\r\n    { segment: 2, orientation: SeamOrientation.EAST },\r\n    { segment: 5, orientation: SeamOrientation.NORTH_EAST },\r\n    { segment: 6, orientation: SeamOrientation.NORTH },\r\n  ],\r\n  4: [\r\n    { segment: 1, orientation: SeamOrientation.SOUTH },\r\n    { segment: 2, orientation: SeamOrientation.SOUTH_WEST },\r\n    { segment: 5, orientation: SeamOrientation.WEST },\r\n    { segment: 7, orientation: SeamOrientation.NORTH },\r\n    { segment: 8, orientation: SeamOrientation.NORTH_WEST },\r\n  ],\r\n  5: [\r\n    { segment: 1, orientation: SeamOrientation.SOUTH_EAST },\r\n    { segment: 2, orientation: SeamOrientation.SOUTH },\r\n    { segment: 3, orientation: SeamOrientation.SOUTH_WEST },\r\n    { segment: 4, orientation: SeamOrientation.EAST },\r\n    { segment: 6, orientation: SeamOrientation.WEST },\r\n    { segment: 7, orientation: SeamOrientation.NORTH_EAST },\r\n    { segment: 8, orientation: SeamOrientation.NORTH },\r\n    { segment: 9, orientation: SeamOrientation.NORTH_WEST },\r\n  ],\r\n  6: [\r\n    { segment: 2, orientation: SeamOrientation.SOUTH_EAST },\r\n    { segment: 3, orientation: SeamOrientation.SOUTH },\r\n    { segment: 5, orientation: SeamOrientation.EAST },\r\n    { segment: 8, orientation: SeamOrientation.NORTH_EAST },\r\n    { segment: 9, orientation: SeamOrientation.NORTH },\r\n  ],\r\n  7: [\r\n    { segment: 4, orientation: SeamOrientation.SOUTH },\r\n    { segment: 5, orientation: SeamOrientation.SOUTH_WEST },\r\n    { segment: 8, orientation: SeamOrientation.WEST },\r\n  ],\r\n  8: [\r\n    { segment: 4, orientation: SeamOrientation.SOUTH_EAST },\r\n    { segment: 5, orientation: SeamOrientation.SOUTH },\r\n    { segment: 6, orientation: SeamOrientation.SOUTH_WEST },\r\n    { segment: 7, orientation: SeamOrientation.EAST },\r\n    { segment: 9, orientation: SeamOrientation.WEST },\r\n  ],\r\n  9: [\r\n    { segment: 5, orientation: SeamOrientation.SOUTH_EAST },\r\n    { segment: 6, orientation: SeamOrientation.SOUTH },\r\n    { segment: 8, orientation: SeamOrientation.EAST },\r\n  ],\r\n};\r\n\r\nexport const processImageSeam = (source: ImageData, copied: ImageData, seam: SeamLabel): void => {\r\n  const { segment, orientation } = seam;\r\n\r\n  const [segmentData] = Segment.fromImageDataAndLabels(source, [segments[segment]]);\r\n  const ditherSeam = segmentData.getSeam(orientation, 0.2);\r\n  const visualPixels = ditherSeam.getPixelsToBeProcessed();\r\n\r\n  visualPixels.forEach((visualPixel) => {\r\n    const index = convertVisualPixelToDataPixelIndex(visualPixel, source.width);\r\n\r\n    const dataPixel = getPixelAtIndex(source, index);\r\n    dataPixel.forEach((data, dataIndex) => {\r\n      const finalIndex = index + dataIndex;\r\n\r\n      copied.data[finalIndex] = data;\r\n    });\r\n  });\r\n};\r\n","import { processImagePair } from \"../ImageCopyStrategies\";\r\nimport { processImageSeam, segmentToSeams } from \"../ImageSeamProcessor\";\r\nimport { segments } from \"../utils/Segment\";\r\n\r\n\r\nexport const processImage = (permutation: number[], imageDataLeft: ImageData, imageDataRight: ImageData): ImageData => {\r\n  const segmentsToBeCopied = permutation.map((value) => segments[value]);\r\n\r\n  const result = processImagePair(imageDataLeft, imageDataRight, segmentsToBeCopied);\r\n\r\n  permutation\r\n    .flatMap((value) => segmentToSeams[value])\r\n    .filter((seam) => !permutation.includes(seam.segment))\r\n    .forEach((seam) => {\r\n      processImageSeam(imageDataLeft, result, seam);\r\n    });\r\n\r\n  return result;\r\n};\r\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","getPixelAtIndex","source","firstIndex","data","Area","constructor","topLeft","bottomRight","width","height","this","x","y","getAllVisualPixels","pixels","xCounter","yCounter","push","SeamOrientation","DitherSeam","area","getPixelsToBeProcessed","filter","pixel","segments","row","column","Segment","fromImageData","imageData","oneThirdWidth","Math","round","twoThirdWidth","oneThirdHeight","twoThirdHeight","fromImageDataAndLabels","labels","indices","map","label","_","index","includes","doesSegmentContainVisualPixel","visualPixel","isX","isY","getSeam","orientation","proportion","proportionOfWidth","floor","proportionOfHeight","NORTH","NORTH_EAST","EAST","SOUTH_EAST","SOUTH","SOUTH_WEST","WEST","NORTH_WEST","segmentToSeams","segment","processImage","permutation","imageDataLeft","imageDataRight","segmentsToBeCopied","value","result","processImagePair","left","right","segmentLabels","resultsLength","resultPixels","counter","isLeft","some","convertDataPixelIndexToVisualPixel","resultClampedArray","Uint8ClampedArray","ImageData","flatMap","seam","forEach","processImageSeam","copied","segmentData","convertVisualPixelToDataPixelIndex","dataIndex","finalIndex"],"sourceRoot":""}